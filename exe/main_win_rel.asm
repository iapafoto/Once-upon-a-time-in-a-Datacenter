; Listing generated by Microsoft (R) Optimizing Compiler Version 19.31.31107.0 

	TITLE	C:\Users\sebastien.durand\source\Intro-4Kbyte-Kelenian\i4k_Bibli1\bin\vc2015\Release\main_win_rel.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BH@BOJGDFJN@glCreateShaderProgramv@	; `string'
PUBLIC	??_C@_0BG@CCBKOCA@glGenProgramPipelines@	; `string'
PUBLIC	??_C@_0BG@GLPOKNCG@glBindProgramPipeline@	; `string'
PUBLIC	??_C@_0BD@CADKHDMH@glUseProgramStages@		; `string'
PUBLIC	??_C@_0BD@KJLDNKED@glProgramUniform1f@		; `string'
PUBLIC	__fltused
PUBLIC	?myglfunc@@3PAPAXA				; myglfunc
_BSS	SEGMENT
__fltused DD	01H DUP (?)
?myglfunc@@3PAPAXA DD 05H DUP (?)			; myglfunc
_BSS	ENDS
;	COMDAT ??_C@_0BD@KJLDNKED@glProgramUniform1f@
CONST	SEGMENT
??_C@_0BD@KJLDNKED@glProgramUniform1f@ DB 'glProgramUniform1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CADKHDMH@glUseProgramStages@
CONST	SEGMENT
??_C@_0BD@CADKHDMH@glUseProgramStages@ DB 'glUseProgramStages', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GLPOKNCG@glBindProgramPipeline@
CONST	SEGMENT
??_C@_0BG@GLPOKNCG@glBindProgramPipeline@ DB 'glBindProgramPipeline', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CCBKOCA@glGenProgramPipelines@
CONST	SEGMENT
??_C@_0BG@CCBKOCA@glGenProgramPipelines@ DB 'glGenProgramPipelines', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BOJGDFJN@glCreateShaderProgramv@
CONST	SEGMENT
??_C@_0BH@BOJGDFJN@glCreateShaderProgramv@ DB 'glCreateShaderProgramv', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
?wavHeader@@3QBHB DD 046464952H				; wavHeader
	DD	0a17fe4H
	DD	045564157H
	DD	020746d66H
	DD	010H
	DD	020001H
	DD	0ac44H
	DD	02b110H
	DD	0100004H
	DD	061746164H
	DD	0a17fc0H
?pfd@@3UtagPIXELFORMATDESCRIPTOR@@B DW 028H		; pfd
	DW	01H
	DD	025H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	?entrypoint@@YGXXZ				; entrypoint
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__ChoosePixelFormat@8:PROC
EXTRN	__imp__SetPixelFormat@12:PROC
EXTRN	__imp__wglCreateContext@4:PROC
EXTRN	__imp__wglGetProcAddress@4:PROC
EXTRN	__imp__wglMakeCurrent@8:PROC
EXTRN	__imp__wglSwapLayerBuffers@8:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__SetProcessDpiAwarenessContext@4:PROC
EXTRN	__imp__sndPlaySoundA@8:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	?intro_init@@YGHXZ:PROC				; intro_init
EXTRN	?intro_do@@YGXJ@Z:PROC				; intro_do
EXTRN	?mzk_init@@YGXPAF@Z:PROC			; mzk_init
_BSS	SEGMENT
?myMuzik@@3PAFA DW 0a17fd6H DUP (?)			; myMuzik
_BSS	ENDS
_DATA	SEGMENT
?glFuncNames@@3PAPADA DD FLAT:??_C@_0BH@BOJGDFJN@glCreateShaderProgramv@ ; glFuncNames
	DD	FLAT:??_C@_0BG@CCBKOCA@glGenProgramPipelines@
	DD	FLAT:??_C@_0BG@GLPOKNCG@glBindProgramPipeline@
	DD	FLAT:??_C@_0BD@CADKHDMH@glUseProgramStages@
	DD	FLAT:??_C@_0BD@KJLDNKED@glProgramUniform1f@
_DATA	ENDS
; Function compile flags: /Ogspy
; File C:\Users\sebastien.durand\source\Intro-4Kbyte-Kelenian\i4k_Bibli1\src\main_win_rel.cpp
;	COMDAT ?entrypoint@@YGXXZ
_TEXT	SEGMENT
?entrypoint@@YGXXZ PROC					; entrypoint, COMDAT

; 56   : {

	push	ebp

; 57   :     SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT_SYSTEM_AWARE);

	push	-2					; fffffffeH
	call	DWORD PTR __imp__SetProcessDpiAwarenessContext@4

; 58   : 
; 59   :     // full screen
; 60   :     //if (ChangeDisplaySettings(&screenSettings, CDS_FULLSCREEN) != DISP_CHANGE_SUCCESSFUL) return;
; 61   :     //ShowCursor(0);
; 62   :     // create window
; 63   :     //HWND hWnd = CreateWindow( "static",0,WS_POPUP|WS_VISIBLE,0,0,XRES,YRES,0,0,0,0);
; 64   :     HWND hWnd = CreateWindow((LPCSTR)0xC018, 0, WS_POPUP | WS_VISIBLE, 0, 0, XRES, YRES, 0, 0, 0, 0);

	xor	ebp, ebp
	push	ebp
	push	ebp
	push	ebp
	push	ebp
	push	720					; 000002d0H
	push	1280					; 00000500H
	push	ebp
	push	ebp
	push	-1879048192				; 90000000H
	push	ebp
	push	49176					; 0000c018H
	push	ebp
	call	DWORD PTR __imp__CreateWindowExA@48

; 65   :     if (!hWnd) return;

	test	eax, eax
	je	$LN1@entrypoint

; 66   :     HDC hDC = GetDC(hWnd);

	push	ebx
	push	eax
	call	DWORD PTR __imp__GetDC@4
	mov	ebx, eax

; 67   :     // initalize opengl
; 68   :     if (!SetPixelFormat(hDC, ChoosePixelFormat(hDC, &pfd), &pfd)) return;

	mov	eax, OFFSET ?pfd@@3UtagPIXELFORMATDESCRIPTOR@@B
	push	eax
	push	eax
	push	ebx
	call	DWORD PTR __imp__ChoosePixelFormat@8
	push	eax
	push	ebx
	call	DWORD PTR __imp__SetPixelFormat@12
	test	eax, eax
	je	$LN21@entrypoint

; 69   :     wglMakeCurrent(hDC, wglCreateContext(hDC));

	push	esi
	push	ebx
	call	DWORD PTR __imp__wglCreateContext@4
	push	eax
	push	ebx
	call	DWORD PTR __imp__wglMakeCurrent@8
	mov	esi, ebp
$LL4@entrypoint:

; 72   :         myglfunc[i] = wglGetProcAddress(glFuncNames[i]);

	push	DWORD PTR ?glFuncNames@@3PAPADA[esi]
	call	DWORD PTR __imp__wglGetProcAddress@4
	mov	DWORD PTR ?myglfunc@@3PAPAXA[esi], eax

; 73   :         if (!myglfunc[i])

	test	eax, eax
	je	SHORT $LN22@entrypoint

; 70   : 
; 71   :     for (int i = 0; i < 5; i++) {

	add	esi, 4
	cmp	esi, 20					; 00000014H
	jl	SHORT $LL4@entrypoint

; 74   :             return;
; 75   :     }
; 76   : 
; 77   :     // init intro
; 78   :     if (!intro_init()) return;

	call	?intro_init@@YGHXZ			; intro_init
	test	eax, eax
	je	SHORT $LN22@entrypoint

; 79   : 
; 80   :     // init mzk
; 81   :     mzk_init(myMuzik + 22);

	push	edi
	push	OFFSET ?myMuzik@@3PAFA+44
	call	?mzk_init@@YGXPAF@Z			; mzk_init

; 82   :     memcpy(myMuzik, wavHeader, 44);

	push	11					; 0000000bH
	pop	ecx

; 83   :     // play mzk
; 84   :     sndPlaySound((const char*)&myMuzik, SND_ASYNC | SND_MEMORY);

	push	5
	mov	esi, OFFSET ?wavHeader@@3QBHB
	mov	edi, OFFSET ?myMuzik@@3PAFA
	rep movsd
	push	OFFSET ?myMuzik@@3PAFA
	call	DWORD PTR __imp__sndPlaySoundA@8

; 85   : 
; 86   :     // play intro
; 87   :     long to = timeGetTime();

	mov	esi, DWORD PTR __imp__timeGetTime@0
	call	esi
	mov	edi, eax
$LL7@entrypoint:

; 88   :     do
; 89   :     {
; 90   :         intro_do(timeGetTime() - to);

	call	esi
	sub	eax, edi
	push	eax
	call	?intro_do@@YGXJ@Z			; intro_do

; 91   :         wglSwapLayerBuffers(hDC, WGL_SWAP_MAIN_PLANE); 

	push	1
	push	ebx
	call	DWORD PTR __imp__wglSwapLayerBuffers@8

; 92   :         //SwapBuffers( hDC );
; 93   : 
; 94   :     } while (!GetAsyncKeyState(VK_ESCAPE));

	push	27					; 0000001bH
	call	DWORD PTR __imp__GetAsyncKeyState@4
	test	ax, ax
	je	SHORT $LL7@entrypoint

; 95   : 
; 96   : #ifdef CLEANDESTROY
; 97   :     sndPlaySound(0, 0);
; 98   :     ChangeDisplaySettings(0, 0);
; 99   :     ShowCursor(1);
; 100  : #endif
; 101  : 
; 102  :     ExitProcess(0);

	push	ebp
	call	DWORD PTR __imp__ExitProcess@4
	pop	edi
$LN25@entrypoint:
$LN22@entrypoint:
	pop	esi
$LN21@entrypoint:
	pop	ebx
$LN1@entrypoint:
	pop	ebp

; 103  : }

	ret	0
$LN23@entrypoint:
?entrypoint@@YGXXZ ENDP					; entrypoint
_TEXT	ENDS
END
